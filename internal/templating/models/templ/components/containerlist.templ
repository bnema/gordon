package components

import (
	"github.com/docker/docker/api/types"
	"strconv"
)

// ContainerList displays a list of containers
templ ContainerList(containers []types.Container, noContainer bool) {
	<!-- Container list using daisyUI components -->
	<div class="card w-full bg-base-300">
	  <div class="card-body p-4">
	    
	    <!-- Action buttons -->
	    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2 mb-4">
	      <h3 class="font-semibold text-base-content">Available Containers: { strconv.Itoa(len(containers)) }</h3>
	      <div class="btn-group">
	        <button 
	          class="btn btn-sm btn-primary"
	          hx-get="/htmx/container-manager"
	          hx-target="#container-manager"
	          hx-swap="innerHTML">
	          <span class="iconf">󰑓</span> Refresh
	        </button>
	      </div>
	    </div>

	    <!-- Container list -->
	    <table class="table">
	      <!-- head -->
	      <thead>
	        <tr>
	          <th>Name</th>
	          <th>Image</th>
	          <th>Status</th>
	          <th>Created</th>
	          <th>Actions</th>
	        </tr>
	      </thead>
	      <tbody>
	        if noContainer || len(containers) == 0 {
	        <tr>
	          <td colspan="5" class="text-center py-4">
	            <div class="alert alert-info">
	              <span class="iconf">ℹ️</span>
	              <span>No containers found. Upload an image first, then create a container.</span>
	            </div>
	          </td>
	        </tr>
	        } else {
	          for _, container := range containers {
	          <tr class="hover">
	            <td>
	              <div class="flex items-center gap-3">
	                <div>
	                  <div class="font-bold">{ container.Names[0] }</div>
	                  <div class="text-sm opacity-50">{ container.ID }</div>
	                </div>
	              </div>
	            </td>
	            <td>{ container.Image }</td>
	            <td>
	              if container.State == "running" {
	                <div class="badge badge-success badge-sm">Running</div>
	              } else if container.State == "exited" {
	                <div class="badge badge-warning badge-sm">Stopped</div>
	              } else {
	                <div class="badge badge-ghost badge-sm">{ container.State }</div>
	              }
	            </td>
	            <td>{ strconv.FormatInt(container.Created, 10) }</td>
	            <th>
	              <div class="dropdown dropdown-end">
	                <div tabindex="0" role="button" class="btn btn-ghost btn-xs">
	                  <span class="iconf">󰅀</span>
	                </div>
	                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-200 rounded-box w-40">
	                  if container.State == "running" {
	                  <li>
	                    <button 
	                      class="text-warning flex items-center"
	                      hx-post={ "/htmx/container-manager/stop/" + container.ID }
	                      hx-target="#container-manager"
	                      hx-swap="innerHTML">
	                      <span class="iconf mr-2">󰓛</span> Stop
	                    </button>
	                  </li>
	                  } else if container.State == "exited" {
	                  <li>
	                    <button 
	                      class="text-success flex items-center"
	                      hx-post={ "/htmx/container-manager/start/" + container.ID }
	                      hx-target="#container-manager"
	                      hx-swap="innerHTML">
	                      <span class="iconf mr-2">󰐊</span> Start
	                    </button>
	                  </li>
	                  }
	                  <li>
	                    <button 
	                      class="text-info flex items-center"
	                      hx-get={ "/htmx/container-manager/edit/" + container.ID }
	                      hx-target="#container-manager"
	                      hx-swap="innerHTML">
	                      <span class="iconf mr-2">󰏫</span> Edit
	                    </button>
	                  </li>
	                  <li>
	                    <button 
	                      class="text-error flex items-center"
	                      hx-delete={ "/htmx/container-manager/delete/" + container.ID }
	                      hx-target="#container-manager"
	                      hx-swap="innerHTML"
	                      hx-confirm="Are you sure you want to delete this container?">
	                      <span class="iconf mr-2">󰆴</span> Delete
	                    </button>
	                  </li>
	                </ul>
	              </div>
	            </th>
	          </tr>
	          }
	        }
	      </tbody>
	    </table>
	  </div>
	</div>

	<script>
	console.debug('Container list rendered');
	</script>
}