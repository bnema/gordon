// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// UploadImageForm displays a form for uploading Docker images
func UploadImageForm() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Upload image form using DaisyUI components --><div class=\"card bg-base-100 shadow\"><div class=\"card-body\"><div class=\"flex justify-between items-center\"><h2 class=\"card-title text-primary\">Upload Image</h2><button class=\"btn btn-sm btn-circle btn-ghost\" hx-get=\"/htmx/image-manager\" hx-target=\"#image-manager\" hx-swap=\"innerHTML\"><span class=\"iconf text-lg\">✕</span></button></div><div class=\"divider\"></div><form id=\"upload-form\" hx-encoding=\"multipart/form-data\" hx-post=\"/htmx/upload-image\" hx-target=\"#image-manager\" hx-swap=\"innerHTML\" class=\"space-y-4\"><div class=\"alert alert-info shadow-lg mb-4\"><span class=\"iconf\">ℹ️</span><div><p>This form allows you to upload a container image (.tar file) to Gordon.</p><p>After uploading, you can create and manage containers from this image.</p></div></div><div class=\"form-control w-full\"><label class=\"label\"><span class=\"label-text\">Select a container image file (.tar)</span></label> <input type=\"file\" name=\"imageFile\" class=\"file-input file-input-bordered w-full\" accept=\".tar\" required></div><div class=\"card-actions justify-end mt-4\"><button class=\"btn btn-ghost\" hx-get=\"/htmx/image-manager\" hx-target=\"#image-manager\" hx-swap=\"innerHTML\" type=\"button\">Cancel</button> <button class=\"btn btn-primary\" type=\"submit\"><span class=\"iconf mr-1\">\U000f0992</span> Upload</button></div></form></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
