package components

import (
	"strconv"
	"fmt"
)

// HumanReadableImage represents an image with human-readable attributes
type HumanReadableImage struct {
	ID          string
	ShortID     string
	Name        string
	Repository  string
	Tag         string
	Size        string
	Created     string
	RepoDigests []string
	RepoTags    []string
}

// ImageList displays a list of images
templ ImageList(images []HumanReadableImage) {
	<!-- Image list using daisyUI components -->
	<div class="card w-full bg-base-300">
		<div class="card-body p-4">
			
			<!-- Action buttons -->
			<div class="flex flex-col sm:flex-row sm:justify-start items-start sm:items-center gap-4 flex-wrap">
				<h3 class="font-semibold text-base-content">Available Images: { strconv.Itoa(len(images)) }</h3>
				<div class="flex gap-2">
					<button 
						class="btn btn-sm btn-secondary"
						hx-get="/htmx/upload-image"
						hx-target="#image-manager"
						hx-swap="innerHTML">
						<span class="iconf">󰦒</span> Upload
					</button>
					<button 
						class="btn btn-sm btn-primary"
						hx-get="/htmx/image-manager"
						hx-target="#image-manager"
						hx-swap="innerHTML">
						<span class="iconf">󰑓</span> Refresh
					</button>
					<button
						id="purge-button"
						class="btn btn-sm btn-warning"
						hx-post="/htmx/image-manager/prune"
						hx-target="#image-manager"
						hx-swap="innerHTML"
						hx-indicator="#purge-spinner"
						hx-confirm="Are you sure you want to delete all unused (dangling and unreferenced) images? This cannot be undone.">
						<span class="btn-content flex items-center"> 
							<span class="iconf mr-1">󰩹</span> Purge Unused
						</span>
						<span class="loading loading-spinner loading-sm hidden" id="purge-spinner"></span>
					</button>
				</div>
			</div>

			<!-- Image list -->
			<table class="table">
				<!-- head -->
				<thead>
					<tr>
						<th>Repository</th>
						<th>Tag</th>
						<th>Size</th>
						<th>Created</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					/* Check if there are no images */
					if len(images) == 0 {
						<tr>
							<td colspan="5" class="text-center py-4">
								<div class="alert alert-info">
									<span class="iconf">ℹ️</span>
									<span>No images found. Upload an image first.</span>
								</div>
							</td>
						</tr>
					} else {
						/* List all available images */
						for _, img := range images {
							<tr class="hover">
								<td>
									<div class="flex items-center gap-3">
										<div>
											<div class="font-bold">{ img.Repository }</div>
											<div class="text-sm opacity-50">{ img.ID }</div>
										</div>
									</div>
								</td>
								<td>{ img.Tag }</td>
								<td>{ img.Size }</td>
								<td>{ img.Created }</td>
								<th>
									<div class="dropdown dropdown-end">
										<div tabindex="0" role="button" class="btn btn-ghost btn-xs">
											<span class="iconf">󰅀</span>
										</div>
										<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-200 rounded-box w-52">
											<li>
												<a 
													href="#"
													hx-get={ string(templ.URL(fmt.Sprintf("/htmx/create-container/%s", img.ShortID))) }
													hx-target={ "#create-form-target-" + img.ShortID }
													hx-swap="innerHTML"
													class="text-success flex items-center">
													<span class="iconf mr-2">󰐕</span> Create Container
												</a>
											</li>
											<li>
												<button 
													class="text-error flex items-center"
													hx-delete={ string(templ.URL(fmt.Sprintf("/htmx/image-manager/delete/%s", img.ShortID))) }
													hx-target="#image-manager"
													hx-swap="innerHTML"
													hx-confirm="Are you sure you want to delete this image?">
													<span class="iconf mr-2">󰆴</span> Delete
												</button>
											</li>
										</ul>
									</div>
								</th>
							</tr>
							<tr>
								<td colspan="5" id={ "create-form-target-" + img.ShortID }>
									<!-- Form will be loaded here by HTMX -->
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>

	<!-- Notification Area -->
	<div id="image-prune-notifications" class="fixed bottom-4 right-4 z-50 space-y-2"></div>

	<style>
	  #purge-button.htmx-request .btn-content {
	    display: none;
	  }
	  #purge-button.htmx-request #purge-spinner {
	    display: inline-block;
	  }
	</style>

	<script>
	console.debug('Image list rendered');

	document.body.addEventListener('showMessage', function(evt) {
		console.debug('showMessage event received:', evt.detail);
		const detail = evt.detail;
		const notificationArea = document.getElementById('image-prune-notifications');
		if (!notificationArea || !detail || !detail.message) return;

		const alertDiv = document.createElement('div');
		let alertClass = 'alert-info'; // Default
		let iconClass = 'ℹ️'; // Default icon

		if (detail.level === 'success') {
			alertClass = 'alert-success';
			iconClass = '󰕬'; // Checkmark icon
		} else if (detail.level === 'error') {
			alertClass = 'alert-error';
			iconClass = '󰅚'; // Error icon
		}

		alertDiv.className = `alert ${alertClass} shadow-lg flex`;
		alertDiv.innerHTML = `
			<span class="iconf text-xl">${iconClass}</span>
			<span>${detail.message}</span>
			<button class="btn btn-sm btn-ghost ml-auto" onclick="this.parentElement.remove()">✕</button>
		`;

		notificationArea.appendChild(alertDiv);

		// Automatically remove the alert after 5 seconds
		setTimeout(() => {
			alertDiv.remove();
		}, 5000);
	});
	</script>
} 