[1mdiff --git a/changes.txt b/changes.txt[m
[1mdeleted file mode 100644[m
[1mindex ab78b90..0000000[m
[1m--- a/changes.txt[m
[1m+++ /dev/null[m
[36m@@ -1,326 +0,0 @@[m
[31m-diff --git a/:memory b/:memory[m
[31m-new file mode 100644[m
[31m-index 0000000..9760229[m
[31m-Binary files /dev/null and b/:memory differ[m
[31m-diff --git a/cmd/main.go b/cmd/main.go[m
[31m-index 6a95d32..b8e2cd4 100644[m
[31m---- a/cmd/main.go[m
[31m-+++ b/cmd/main.go[m
[31m-@@ -4,17 +4,30 @@ import ([m
[31m- 	"fmt"[m
[31m- 	"log/slog"[m
[31m- [m
[31m-+	"github.com/labstack/echo/v4"[m
[31m-+[m
[31m- 	"github.com/bnema/gordon/internal/app"[m
[31m- 	"github.com/bnema/gordon/internal/httpserve"[m
[31m--	"github.com/labstack/echo/v4"[m
[31m- )[m
[31m- [m
[31m- func main() {[m
[31m- 	a := app.NewApp()[m
[31m-+[m
[31m-+	// Initialize database[m
[31m-+	db, err := app.InitializeDB(a)[m
[31m-+	if err != nil {[m
[31m-+		slog.Error("Failed to load database", err)[m
[31m-+	} else {[m
[31m-+		slog.Info("Database loaded")[m
[31m-+	}[m
[31m-+[m
[31m-+	fmt.Println(db)[m
[31m-+[m
[31m- 	e := echo.New()[m
[31m- 	e.HideBanner = true[m
[31m- 	e.HidePort = true[m
[31m- 	e = httpserve.RegisterRoutes(e, a)[m
[31m- 	slog.Info("Starting server", "port", a.HttpPort)[m
[31m- 	slog.Error("Server error", e.Start(fmt.Sprintf(":%d", a.HttpPort)))[m
[31m-+[m
[31m- }[m
[31m-diff --git a/go.mod b/go.mod[m
[31m-index 35e2d3c..8a3ac59 100644[m
[31m---- a/go.mod[m
[31m-+++ b/go.mod[m
[31m-@@ -24,6 +24,7 @@ require ([m
[31m- 	github.com/gorilla/securecookie v1.1.1 // indirect[m
[31m- 	github.com/gorilla/sessions v1.2.1 // indirect[m
[31m- 	github.com/klauspost/compress v1.16.7 // indirect[m
[31m-+	github.com/kr/text v0.1.0 // indirect[m
[31m- 	github.com/labstack/gommon v0.4.0 // indirect[m
[31m- 	github.com/mattn/go-colorable v0.1.13 // indirect[m
[31m- 	github.com/mattn/go-isatty v0.0.19 // indirect[m
[31m-@@ -35,6 +36,7 @@ require ([m
[31m- 	github.com/opencontainers/image-spec v1.1.0-rc2.0.20221005185240-3a7f492d3f1b // indirect[m
[31m- 	github.com/opencontainers/runc v1.1.9 // indirect[m
[31m- 	github.com/pkg/errors v0.9.1 // indirect[m
[31m-+	github.com/rogpeppe/go-internal v1.11.0 // indirect[m
[31m- 	github.com/sirupsen/logrus v1.9.3 // indirect[m
[31m- 	github.com/valyala/bytebufferpool v1.0.0 // indirect[m
[31m- 	github.com/valyala/fasttemplate v1.2.2 // indirect[m
[31m-@@ -45,5 +47,6 @@ require ([m
[31m- 	golang.org/x/text v0.11.0 // indirect[m
[31m- 	golang.org/x/time v0.3.0 // indirect[m
[31m- 	golang.org/x/tools v0.7.0 // indirect[m
[31m-+	gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect[m
[31m- 	gotest.tools/v3 v3.5.0 // indirect[m
[31m- )[m
[31m-diff --git a/go.sum b/go.sum[m
[31m-index 7b9b857..17b0bcd 100644[m
[31m---- a/go.sum[m
[31m-+++ b/go.sum[m
[31m-@@ -39,6 +39,11 @@ github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI[m
[31m- github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=[m
[31m- github.com/klauspost/compress v1.16.7 h1:2mk3MPGNzKyxErAw8YaohYh69+pa4sIQSC0fPGCFR9I=[m
[31m- github.com/klauspost/compress v1.16.7/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=[m
[31m-+github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=[m
[31m-+github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=[m
[31m-+github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=[m
[31m-+github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=[m
[31m-+github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=[m
[31m- github.com/labstack/echo-contrib v0.15.0 h1:9K+oRU265y4Mu9zpRDv3X+DGTqUALY6oRHCSZZKCRVU=[m
[31m- github.com/labstack/echo-contrib v0.15.0/go.mod h1:lei+qt5CLB4oa7VHTE0yEfQSEB9XTJI1LUqko9UWvo4=[m
[31m- github.com/labstack/echo/v4 v4.11.1 h1:dEpLU2FLg4UVmvCGPuk/APjlH6GDpbEPti61srUUUs4=[m
[31m-@@ -72,6 +77,8 @@ github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=[m
[31m- github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=[m
[31m- github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=[m
[31m- github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=[m
[31m-+github.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=[m
[31m-+github.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=[m
[31m- github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=[m
[31m- github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=[m
[31m- github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=[m
[31m-@@ -153,8 +160,9 @@ golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8T[m
[31m- golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=[m
[31m- golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=[m
[31m- golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=[m
[31m--gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=[m
[31m- gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=[m
[31m-+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=[m
[31m-+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=[m
[31m- gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=[m
[31m- gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=[m
[31m- gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=[m
[31m-diff --git a/internal/app/app.go b/internal/app/app.go[m
[31m-index c6f49ac..1dd44b8 100644[m
[31m---- a/internal/app/app.go[m
[31m-+++ b/internal/app/app.go[m
[31m-@@ -27,6 +27,7 @@ const ([m
[31m- type App struct {[m
[31m- 	TemplateFS   fs.FS[m
[31m- 	PublicFS     fs.FS[m
[31m-+	DB           interface{}[m
[31m- 	BuildVersion string[m
[31m- 	BuildDir     string[m
[31m- 	DBDir        string[m
[31m-diff --git a/internal/app/sqlite.go b/internal/app/sqlite.go[m
[31m-index 9f1b1ab..ddc6a1e 100644[m
[31m---- a/internal/app/sqlite.go[m
[31m-+++ b/internal/app/sqlite.go[m
[31m-@@ -5,58 +5,78 @@ import ([m
[31m- 	"database/sql"[m
[31m- 	"fmt"[m
[31m- 	"os"[m
[31m-+	"path/filepath"[m
[31m- [m
[31m--	sqlite3 "github.com/mattn/go-sqlite3"[m
[31m-+	"github.com/bnema/gordon/internal/database/migrate"[m
[31m-+	"github.com/mattn/go-sqlite3"[m
[31m- )[m
[31m- [m
[31m--// Initialize in-memory SQLite database and returns its connection[m
[31m--func InitDB() (db *sql.DB, err error) {[m
[31m--	db, err = sql.Open("sqlite3", "file::memory?cache=shared")[m
[31m--	if err != nil {[m
[31m--		return nil, fmt.Errorf("failed to open in-memory database: %v", err)[m
[31m--	}[m
[31m--	return[m
[31m--}[m
[31m--[m
[31m--// CloseDB closes the database connection and backs up the in-memory database to disk[m
[31m--func CloseDB(db *sql.DB, a *App) error {[m
[31m--	if err := BackupDB(db, a); err != nil {[m
[31m--		return err[m
[31m--	}[m
[31m-+// InitializeDB initializes the SQLite database. If a database file exists on disk, it loads it into memory.[m
[31m-+// Otherwise, it creates a new in-memory database and bootstraps it.[m
[31m-+func InitializeDB(a *App) (*sql.DB, error) {[m
[31m-+	dbfp := a.GetDBFilePath()[m
[31m- [m
[31m--	if err := db.Close(); err != nil {[m
[31m--		return fmt.Errorf("failed to close database: %v", err)[m
[31m-+	// Check if the directory exists, if not create it[m
[31m-+	dir := filepath.Dir(a.DBDir)[m
[31m-+	fmt.Println("dir", dir)[m
[31m-+	if _, err := os.Stat(dir); os.IsNotExist(err) {[m
[31m-+		err = os.MkdirAll(dir, 0755)[m
[31m-+		if err != nil {[m
[31m-+			return nil, fmt.Errorf("failed to create directory: %v", err)[m
[31m-+		}[m
[31m- 	}[m
[31m- [m
[31m--	return nil[m
[31m--}[m
[31m-+	// If the database file doesn't exist on disk[m
[31m-+	if _, err := os.Stat(dbfp); os.IsNotExist(err) {[m
[31m-+		memDB, err := initInMemoryDB()[m
[31m-+		if err != nil {[m
[31m-+			return nil, err[m
[31m-+		}[m
[31m- [m
[31m--// LoadDBIntoMemory loads the database from disk into memory[m
[31m--func LoadDBIntoMemory(a *App) (*sql.DB, error) {[m
[31m--	dbfp := a.GetDBFilePath()[m
[31m-+		// Run the bootstrap[m
[31m-+		RunBootstrap(memDB)[m
[31m- [m
[31m--	if _, err := os.Stat(dbfp); err != nil {[m
[31m--		return nil, nil[m
[31m-+		// Explicitly backup the in-memory database to disk[m
[31m-+		err = BackupDB(memDB, a)[m
[31m-+		if err != nil {[m
[31m-+			return nil, fmt.Errorf("failed to backup in-memory database to disk: %v", err)[m
[31m-+		}[m
[31m- 	}[m
[31m- [m
[31m--	memDB, err := InitDB()[m
[31m-+	memDB, err := initInMemoryDB()[m
[31m- 	if err != nil {[m
[31m- 		return nil, err[m
[31m- 	}[m
[31m--[m
[31m- 	diskDB, err := sql.Open("sqlite3", dbfp)[m
[31m- 	if err != nil {[m
[31m- 		return nil, fmt.Errorf("failed to open database file: %v", err)[m
[31m- 	}[m
[31m-+	defer diskDB.Close()[m
[31m- [m
[31m- 	if err := transferData(diskDB, memDB); err != nil {[m
[31m- 		return nil, err[m
[31m- 	}[m
[31m--[m
[31m- 	return memDB, nil[m
[31m- }[m
[31m- [m
[31m--// transferData transfers data from srcDB to dstDB[m
[31m-+func initInMemoryDB() (*sql.DB, error) {[m
[31m-+	db, err := sql.Open("sqlite3", "file::memory?cache=shared")[m
[31m-+	if err != nil {[m
[31m-+		return nil, fmt.Errorf("failed to open in-memory database: %v", err)[m
[31m-+	}[m
[31m-+	return db, nil[m
[31m-+}[m
[31m-+[m
[31m-+func CloseAndBackupDB(db *sql.DB, a *App) error {[m
[31m-+	if err := BackupDB(db, a); err != nil {[m
[31m-+		return err[m
[31m-+	}[m
[31m-+	if err := db.Close(); err != nil {[m
[31m-+		return fmt.Errorf("failed to close database: %v", err)[m
[31m-+	}[m
[31m-+	return nil[m
[31m-+}[m
[31m-+[m
[31m- func transferData(srcDB, dstDB *sql.DB) error {[m
[31m- 	srcConn, err := srcDB.Conn(context.Background())[m
[31m- 	if err != nil {[m
[31m-@@ -74,35 +94,50 @@ func transferData(srcDB, dstDB *sql.DB) error {[m
[31m- 		return dstConn.Raw(func(dstRawConn interface{}) error {[m
[31m- 			srcSqlite3Conn := srcRawConn.(*sqlite3.SQLiteConn)[m
[31m- 			dstSqlite3Conn := dstRawConn.(*sqlite3.SQLiteConn)[m
[31m--[m
[31m- 			_, err := srcSqlite3Conn.Backup("main", dstSqlite3Conn, "main")[m
[31m- 			return err[m
[31m- 		})[m
[31m- 	})[m
[31m- }[m
[31m- [m
[31m--// BackupDB backs up the in-memory database to disk[m
[31m- func BackupDB(db *sql.DB, a *App) error {[m
[31m- 	dbfp := a.GetDBFilePath()[m
[31m--[m
[31m- 	conn, err := db.Conn(context.Background())[m
[31m- 	if err != nil {[m
[31m- 		return fmt.Errorf("failed to get underlying database connection: %v", err)[m
[31m- 	}[m
[31m-+	defer conn.Close()[m
[31m- [m
[31m- 	return conn.Raw(func(sqliteConn interface{}) error {[m
[31m- 		sqlite3Conn := sqliteConn.(*sqlite3.SQLiteConn)[m
[31m--		backupDB, err := sqlite3Conn.Backup(dbfp, sqlite3Conn, "main")[m
[31m-+		diskDB, err := sql.Open("sqlite3", dbfp)[m
[31m-+		fmt.Println("diskDB", diskDB)[m
[31m-+		if err != nil {[m
[31m-+			return fmt.Errorf("failed to open destination database file: %v", err)[m
[31m-+		}[m
[31m-+		defer diskDB.Close()[m
[31m-+[m
[31m-+		diskConn, err := diskDB.Conn(context.Background())[m
[31m- 		if err != nil {[m
[31m--			return fmt.Errorf("failed to create backup: %v", err)[m
[31m-+			return fmt.Errorf("failed to get connection from diskDB: %v", err)[m
[31m- 		}[m
[31m-+		defer diskConn.Close()[m
[31m-+[m
[31m-+		var backupDB *sqlite3.SQLiteBackup[m
[31m-+		err = diskConn.Raw(func(diskRawConn interface{}) error {[m
[31m-+			backupDB, err = sqlite3Conn.Backup("main", diskRawConn.(*sqlite3.SQLiteConn), "main")[m
[31m-+			return err[m
[31m-+		})[m
[31m- 		defer backupDB.Close()[m
[31m- [m
[31m- 		_, err = backupDB.Step(-1)[m
[31m- 		if err != nil {[m
[31m- 			return fmt.Errorf("failed to backup in-memory database: %v", err)[m
[31m- 		}[m
[31m--[m
[31m- 		return nil[m
[31m- 	})[m
[31m- }[m
[31m-+[m
[31m-+func RunBootstrap(db *sql.DB) error {[m
[31m-+	return migrate.CreateUserTable(db)[m
[31m-+}[m
[31m-diff --git a/internal/database/migrate/bootstrapdb.go b/internal/database/migrate/bootstrapdb.go[m
[31m-new file mode 100644[m
[31m-index 0000000..1f53246[m
[31m---- /dev/null[m
[31m-+++ b/internal/database/migrate/bootstrapdb.go[m
[31m-@@ -0,0 +1,24 @@[m
[31m-+package migrate[m
[31m-+[m
[31m-+import ([m
[31m-+	"database/sql"[m
[31m-+	"fmt"[m
[31m-+)[m
[31m-+[m
[31m-+// createUserTable creates the 'user' table in the provided SQLite database.[m
[31m-+func CreateUserTable(db *sql.DB) error {[m
[31m-+	createTableSQL := `[m
[31m-+	CREATE TABLE user ([m
[31m-+		id INTEGER PRIMARY KEY AUTOINCREMENT,[m
[31m-+		username TEXT NOT NULL,[m
[31m-+		password TEXT NOT NULL,  -- This should be hashed and salted in a real-world scenario.[m
[31m-+		oauth_token TEXT[m
[31m-+	);`[m
[31m-+[m
[31m-+	_, err := db.Exec(createTableSQL)[m
[31m-+	if err != nil {[m
[31m-+		return fmt.Errorf("failed to create user table: %v", err)[m
[31m-+	}[m
[31m-+[m
[31m-+	return nil[m
[31m-+}[m
[31m-diff --git a/internal/httpserve/handler/adminroutes.go b/internal/httpserve/handler/adminroutes.go[m
[31m-index 8701ae3..f4acd64 100644[m
[31m---- a/internal/httpserve/handler/adminroutes.go[m
[31m-+++ b/internal/httpserve/handler/adminroutes.go[m
[31m-@@ -1,8 +1,6 @@[m
[31m- package handler[m
[31m- [m
[31m- import ([m
[31m--	"fmt"[m
[31m--[m
[31m- 	"github.com/bnema/gordon/internal/app"[m
[31m- 	"github.com/bnema/gordon/internal/gotemplate/render"[m
[31m- 	"github.com/bnema/gordon/internal/httpserve/middleware"[m
[1mdiff --git a/internal/httpserve/handler/oauth.go b/internal/httpserve/handler/oauth.go[m
[1mindex bd40379..b876c75 100644[m
[1m--- a/internal/httpserve/handler/oauth.go[m
[1m+++ b/internal/httpserve/handler/oauth.go[m
[36m@@ -12,6 +12,7 @@[m [mimport ([m
 	"github.com/markbates/goth/gothic"[m
 	"github.com/markbates/goth/providers/github"[m
 	"net/http"[m
[32m+[m	[32m"os"[m
 )[m
 [m
 var providerNames []string[m
[1mdiff --git a/internal/httpserve/router.go b/internal/httpserve/router.go[m
[1mindex bc1368c..edd2748 100644[m
[1m--- a/internal/httpserve/router.go[m
[1m+++ b/internal/httpserve/router.go[m
[36m@@ -19,34 +19,19 @@[m [mfunc RegisterRoutes(e *echo.Echo, a *app.App) *echo.Echo {[m
 	// Use session middleware[m
 	// Add session middleware[m
 	e.Use(session.Middleware(sessions.NewCookieStore([]byte(os.Getenv("SECRET")))))[m
[31m-	// e.Use(middleware.SecureRoutes())[m
 	e.Use(middleware.ColorSchemeDetection)[m
 	e.Use(middleware.LanguageDetection)[m
 [m
 	// Register routes[m
[31m-[m
[31m-	// Serve admin routes[m
 	bindAdminRoute(e, a, AdminPath)[m
[31m-	// Serve static files[m
 	bindStaticRoute(e, a, "/*")[m
[32m+[m	[32mbindLoginRoute(e, a, AdminPath)[m
[32m+[m
 	// Protect the root path with a 403[m
 	e.GET("/", func(c echo.Context) error {[m
 		return c.String(403, "403 Forbidden")[m
 	})[m
 [m
[31m-	e.GET(a.AdminPath+"/login", func(c echo.Context) error {[m
[31m-		return handler.RenderLoginPage(c, a)[m
[31m-	})[m
[31m-	e.GET(a.AdminPath+"/login/:provider", func(c echo.Context) error {[m
[31m-		return handler.StartOAuth(c, a)[m
[31m-	})[m
[31m-	e.GET(a.OauthCallbackURL, func(c echo.Context) error {[m
[31m-		return handler.OAuthCallback(c, a)[m
[31m-	})[m
[31m-	e.GET(a.AdminPath+"/logout", func(c echo.Context) error {[m
[31m-		return handler.Logout(c, a)[m
[31m-	})[m
[31m-[m
 	return e[m
 }[m
 [m
[36m@@ -61,3 +46,18 @@[m [mfunc bindAdminRoute(e *echo.Echo, a *app.App, path string) {[m
 		return handler.AdminRoute(c, a)[m
 	})[m
 }[m
[32m+[m
[32m+[m[32mfunc bindLoginRoute(e *echo.Echo, a *app.App, adminPath string) {[m
[32m+[m	[32me.GET(adminPath+"/login", func(c echo.Context) error {[m
[32m+[m		[32mreturn handler.RenderLoginPage(c, a)[m
[32m+[m	[32m})[m
[32m+[m	[32me.GET(adminPath+"/login/:provider", func(c echo.Context) error {[m
[32m+[m		[32mreturn handler.StartOAuth(c, a)[m
[32m+[m	[32m})[m
[32m+[m	[32me.GET(a.OauthCallbackURL, func(c echo.Context) error {[m
[32m+[m		[32mreturn handler.OAuthCallback(c, a)[m
[32m+[m	[32m})[m
[32m+[m	[32me.GET(adminPath+"/logout", func(c echo.Context) error {[m
[32m+[m		[32mreturn handler.Logout(c, a)[m
[32m+[m	[32m})[m
[32m+[m[32m}[m
