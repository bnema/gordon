diff --git a/:memory b/:memory
new file mode 100644
index 0000000..9760229
Binary files /dev/null and b/:memory differ
diff --git a/cmd/main.go b/cmd/main.go
index 6a95d32..b8e2cd4 100644
--- a/cmd/main.go
+++ b/cmd/main.go
@@ -4,17 +4,30 @@ import (
 	"fmt"
 	"log/slog"
 
+	"github.com/labstack/echo/v4"
+
 	"github.com/bnema/gordon/internal/app"
 	"github.com/bnema/gordon/internal/httpserve"
-	"github.com/labstack/echo/v4"
 )
 
 func main() {
 	a := app.NewApp()
+
+	// Initialize database
+	db, err := app.InitializeDB(a)
+	if err != nil {
+		slog.Error("Failed to load database", err)
+	} else {
+		slog.Info("Database loaded")
+	}
+
+	fmt.Println(db)
+
 	e := echo.New()
 	e.HideBanner = true
 	e.HidePort = true
 	e = httpserve.RegisterRoutes(e, a)
 	slog.Info("Starting server", "port", a.HttpPort)
 	slog.Error("Server error", e.Start(fmt.Sprintf(":%d", a.HttpPort)))
+
 }
diff --git a/go.mod b/go.mod
index 35e2d3c..8a3ac59 100644
--- a/go.mod
+++ b/go.mod
@@ -24,6 +24,7 @@ require (
 	github.com/gorilla/securecookie v1.1.1 // indirect
 	github.com/gorilla/sessions v1.2.1 // indirect
 	github.com/klauspost/compress v1.16.7 // indirect
+	github.com/kr/text v0.1.0 // indirect
 	github.com/labstack/gommon v0.4.0 // indirect
 	github.com/mattn/go-colorable v0.1.13 // indirect
 	github.com/mattn/go-isatty v0.0.19 // indirect
@@ -35,6 +36,7 @@ require (
 	github.com/opencontainers/image-spec v1.1.0-rc2.0.20221005185240-3a7f492d3f1b // indirect
 	github.com/opencontainers/runc v1.1.9 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
+	github.com/rogpeppe/go-internal v1.11.0 // indirect
 	github.com/sirupsen/logrus v1.9.3 // indirect
 	github.com/valyala/bytebufferpool v1.0.0 // indirect
 	github.com/valyala/fasttemplate v1.2.2 // indirect
@@ -45,5 +47,6 @@ require (
 	golang.org/x/text v0.11.0 // indirect
 	golang.org/x/time v0.3.0 // indirect
 	golang.org/x/tools v0.7.0 // indirect
+	gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect
 	gotest.tools/v3 v3.5.0 // indirect
 )
diff --git a/go.sum b/go.sum
index 7b9b857..17b0bcd 100644
--- a/go.sum
+++ b/go.sum
@@ -39,6 +39,11 @@ github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/klauspost/compress v1.16.7 h1:2mk3MPGNzKyxErAw8YaohYh69+pa4sIQSC0fPGCFR9I=
 github.com/klauspost/compress v1.16.7/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
+github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
+github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
+github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
+github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/labstack/echo-contrib v0.15.0 h1:9K+oRU265y4Mu9zpRDv3X+DGTqUALY6oRHCSZZKCRVU=
 github.com/labstack/echo-contrib v0.15.0/go.mod h1:lei+qt5CLB4oa7VHTE0yEfQSEB9XTJI1LUqko9UWvo4=
 github.com/labstack/echo/v4 v4.11.1 h1:dEpLU2FLg4UVmvCGPuk/APjlH6GDpbEPti61srUUUs4=
@@ -72,6 +77,8 @@ github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=
+github.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=
 github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
 github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
@@ -153,8 +160,9 @@ golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8T
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=
+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
diff --git a/internal/app/app.go b/internal/app/app.go
index c6f49ac..1dd44b8 100644
--- a/internal/app/app.go
+++ b/internal/app/app.go
@@ -27,6 +27,7 @@ const (
 type App struct {
 	TemplateFS   fs.FS
 	PublicFS     fs.FS
+	DB           interface{}
 	BuildVersion string
 	BuildDir     string
 	DBDir        string
diff --git a/internal/app/sqlite.go b/internal/app/sqlite.go
index 9f1b1ab..ddc6a1e 100644
--- a/internal/app/sqlite.go
+++ b/internal/app/sqlite.go
@@ -5,58 +5,78 @@ import (
 	"database/sql"
 	"fmt"
 	"os"
+	"path/filepath"
 
-	sqlite3 "github.com/mattn/go-sqlite3"
+	"github.com/bnema/gordon/internal/database/migrate"
+	"github.com/mattn/go-sqlite3"
 )
 
-// Initialize in-memory SQLite database and returns its connection
-func InitDB() (db *sql.DB, err error) {
-	db, err = sql.Open("sqlite3", "file::memory?cache=shared")
-	if err != nil {
-		return nil, fmt.Errorf("failed to open in-memory database: %v", err)
-	}
-	return
-}
-
-// CloseDB closes the database connection and backs up the in-memory database to disk
-func CloseDB(db *sql.DB, a *App) error {
-	if err := BackupDB(db, a); err != nil {
-		return err
-	}
+// InitializeDB initializes the SQLite database. If a database file exists on disk, it loads it into memory.
+// Otherwise, it creates a new in-memory database and bootstraps it.
+func InitializeDB(a *App) (*sql.DB, error) {
+	dbfp := a.GetDBFilePath()
 
-	if err := db.Close(); err != nil {
-		return fmt.Errorf("failed to close database: %v", err)
+	// Check if the directory exists, if not create it
+	dir := filepath.Dir(a.DBDir)
+	fmt.Println("dir", dir)
+	if _, err := os.Stat(dir); os.IsNotExist(err) {
+		err = os.MkdirAll(dir, 0755)
+		if err != nil {
+			return nil, fmt.Errorf("failed to create directory: %v", err)
+		}
 	}
 
-	return nil
-}
+	// If the database file doesn't exist on disk
+	if _, err := os.Stat(dbfp); os.IsNotExist(err) {
+		memDB, err := initInMemoryDB()
+		if err != nil {
+			return nil, err
+		}
 
-// LoadDBIntoMemory loads the database from disk into memory
-func LoadDBIntoMemory(a *App) (*sql.DB, error) {
-	dbfp := a.GetDBFilePath()
+		// Run the bootstrap
+		RunBootstrap(memDB)
 
-	if _, err := os.Stat(dbfp); err != nil {
-		return nil, nil
+		// Explicitly backup the in-memory database to disk
+		err = BackupDB(memDB, a)
+		if err != nil {
+			return nil, fmt.Errorf("failed to backup in-memory database to disk: %v", err)
+		}
 	}
 
-	memDB, err := InitDB()
+	memDB, err := initInMemoryDB()
 	if err != nil {
 		return nil, err
 	}
-
 	diskDB, err := sql.Open("sqlite3", dbfp)
 	if err != nil {
 		return nil, fmt.Errorf("failed to open database file: %v", err)
 	}
+	defer diskDB.Close()
 
 	if err := transferData(diskDB, memDB); err != nil {
 		return nil, err
 	}
-
 	return memDB, nil
 }
 
-// transferData transfers data from srcDB to dstDB
+func initInMemoryDB() (*sql.DB, error) {
+	db, err := sql.Open("sqlite3", "file::memory?cache=shared")
+	if err != nil {
+		return nil, fmt.Errorf("failed to open in-memory database: %v", err)
+	}
+	return db, nil
+}
+
+func CloseAndBackupDB(db *sql.DB, a *App) error {
+	if err := BackupDB(db, a); err != nil {
+		return err
+	}
+	if err := db.Close(); err != nil {
+		return fmt.Errorf("failed to close database: %v", err)
+	}
+	return nil
+}
+
 func transferData(srcDB, dstDB *sql.DB) error {
 	srcConn, err := srcDB.Conn(context.Background())
 	if err != nil {
@@ -74,35 +94,50 @@ func transferData(srcDB, dstDB *sql.DB) error {
 		return dstConn.Raw(func(dstRawConn interface{}) error {
 			srcSqlite3Conn := srcRawConn.(*sqlite3.SQLiteConn)
 			dstSqlite3Conn := dstRawConn.(*sqlite3.SQLiteConn)
-
 			_, err := srcSqlite3Conn.Backup("main", dstSqlite3Conn, "main")
 			return err
 		})
 	})
 }
 
-// BackupDB backs up the in-memory database to disk
 func BackupDB(db *sql.DB, a *App) error {
 	dbfp := a.GetDBFilePath()
-
 	conn, err := db.Conn(context.Background())
 	if err != nil {
 		return fmt.Errorf("failed to get underlying database connection: %v", err)
 	}
+	defer conn.Close()
 
 	return conn.Raw(func(sqliteConn interface{}) error {
 		sqlite3Conn := sqliteConn.(*sqlite3.SQLiteConn)
-		backupDB, err := sqlite3Conn.Backup(dbfp, sqlite3Conn, "main")
+		diskDB, err := sql.Open("sqlite3", dbfp)
+		fmt.Println("diskDB", diskDB)
+		if err != nil {
+			return fmt.Errorf("failed to open destination database file: %v", err)
+		}
+		defer diskDB.Close()
+
+		diskConn, err := diskDB.Conn(context.Background())
 		if err != nil {
-			return fmt.Errorf("failed to create backup: %v", err)
+			return fmt.Errorf("failed to get connection from diskDB: %v", err)
 		}
+		defer diskConn.Close()
+
+		var backupDB *sqlite3.SQLiteBackup
+		err = diskConn.Raw(func(diskRawConn interface{}) error {
+			backupDB, err = sqlite3Conn.Backup("main", diskRawConn.(*sqlite3.SQLiteConn), "main")
+			return err
+		})
 		defer backupDB.Close()
 
 		_, err = backupDB.Step(-1)
 		if err != nil {
 			return fmt.Errorf("failed to backup in-memory database: %v", err)
 		}
-
 		return nil
 	})
 }
+
+func RunBootstrap(db *sql.DB) error {
+	return migrate.CreateUserTable(db)
+}
diff --git a/internal/database/migrate/bootstrapdb.go b/internal/database/migrate/bootstrapdb.go
new file mode 100644
index 0000000..1f53246
--- /dev/null
+++ b/internal/database/migrate/bootstrapdb.go
@@ -0,0 +1,24 @@
+package migrate
+
+import (
+	"database/sql"
+	"fmt"
+)
+
+// createUserTable creates the 'user' table in the provided SQLite database.
+func CreateUserTable(db *sql.DB) error {
+	createTableSQL := `
+	CREATE TABLE user (
+		id INTEGER PRIMARY KEY AUTOINCREMENT,
+		username TEXT NOT NULL,
+		password TEXT NOT NULL,  -- This should be hashed and salted in a real-world scenario.
+		oauth_token TEXT
+	);`
+
+	_, err := db.Exec(createTableSQL)
+	if err != nil {
+		return fmt.Errorf("failed to create user table: %v", err)
+	}
+
+	return nil
+}
diff --git a/internal/httpserve/handler/adminroutes.go b/internal/httpserve/handler/adminroutes.go
index 8701ae3..f4acd64 100644
--- a/internal/httpserve/handler/adminroutes.go
+++ b/internal/httpserve/handler/adminroutes.go
@@ -1,8 +1,6 @@
 package handler
 
 import (
-	"fmt"
-
 	"github.com/bnema/gordon/internal/app"
 	"github.com/bnema/gordon/internal/gotemplate/render"
 	"github.com/bnema/gordon/internal/httpserve/middleware"
